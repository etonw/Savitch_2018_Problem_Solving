/*
project_03_07_approximate_e.cpp.cpp

     AUTHOR :  Eton C. Williams
       DATE :  06 July 2022
       BOOK :  Savitch_2018_Problem Soving with C++
               Chapter 3: More Flow of Control
               p 208           

REQUIREMENTS:
7. The value ex can be approximated by the sum
1 + x^1/1 + x^2/2! + x^3/3! + ... + x^n/n!
Write a program that takes a value x as input and outputs this sum for n taken
to be each of the values 1 to 100. 

The program should also output e^x calculated
using the predefined function exp. The function exp is a predefined function
such that exp(x) returns an approximation to the value e^x. 

The function exp is in the library with the header file cmath. 

Your program should repeat the calculation for new values of x until the user says she or he is through.

Use variables of type double to store the factorials or you are likely to
produce integer overflow (or arrange your calculation to avoid any direct
calculation of factorials). 

100 lines of output might not fit comfortably on your screen. 
Output the 100 output values in a format that will fit all 100 values on the screen. 
For example, you might output 10 lines with 10 values on each line.

*/

#include <iostream>
#include <cmath>   
using namespace std;

//PROTOTYPE FUNCTIONS
double input_double();
char input_char_switch_y_n();
void set_decimal_places();
void program_end();

double factorial (double n)
{
    double x = n;
    for(int i = n; i > 2; i--)
        {
            x *= (i-1);
        } // end for
    return x;
} // end function



double tetration ( double q)
{
    double p = q; 
    if (p == 1)
    {
        return 1;
    }     

    while (p>1)
        {
            
        }
    for (int i = 1; i < p; i++ )
        {
           p*=p; 
        }
    return p;
}

double exponential (double x)
{
    double z(0), soln(0);
    z = x;
    for (int i = 1; i <= 100; i++)
        {
             soln += (power_of_same_number(z) / factorial(i)  );
        }
    return 1 + soln;
}
//initialize global variables and CONSTANTS
char REPEAT;  //User determines if program repeats



int main() 
{
	// VARIABLES
    double x ; // value of x in e^x 
    int xx ; 


    // PROGRAM DESCRIPTION
	cout << endl 
         << endl;
    cout << "\t\t\t\t\t=  PROGRAM DESCRIPTION =\n" << endl;
    cout << "This program will :"   << endl 
         << "  (i) Approximate the value of e^x for a user input x"    << endl 
         << " (ii) and compare it to the value produced by <cmath> library"    << endl
         << endl;
    
    // program runs at least once, good for testing
    do{        
        // INPUT
        cout << endl << endl
             << endl;
        cout << "\t\t\t\t\t\t= INPUT PROMPT =" << endl 
             << endl;
        
        cout << " What is the value of x ? : ";
        x = input_double();
       
        // Echo input
        cout << endl 
             << endl;
        cout << "\t\t\t\t\tYOU ENTERED: "           << endl 
             << endl;
        cout << "\t\t\t\t\t x = "         << x  << endl 
             << endl;
        
         // CALCULATION and OUTPUT


        // 
        cout << endl << endl;
        cout << "\t\t\t\t\t\t= COMPUTATION RESULTS =  " << endl;
        
        cout << "Our calculation: e raised to the power of x  = " << exponential (x)  << endl 
             << endl;
        cout << " <cmath> calculation: e raised to the power of x = "  <<  exp(x)  << endl
             << endl; 
        
        REPEAT = input_char_switch_y_n();   // USER determines if program repeats
    } while (REPEAT == 'Y');    //condition to repeat the program
    void program_end(); //echo input and end program
return 0; 
}// end main

// function: take numerical double from User
double input_double ()
{
    double entered_number; 
    std::cout << " (enter number): ";
    std::cin >> entered_number;
    return entered_number; 
}

// function: format number of decimal places
void set_decimal_places()
{
    cout.setf(ios::fixed);		
    cout.setf(ios::showpoint);
    cout.precision(2);			// number of decimal places in parantheses
} // end function

// function: take y/ n char input: easily modified for other char input
char input_char_switch_y_n()
{
    char char_input = ' ';
    do
    {
	    cout << "\t\tRepeat program?  Y (Yes) /  N (No) " ;
        cin >> char_input;
        switch(char_input)
	    {
    		case 'Y':
    		case 'y':  // allow for both upper and lower case letters
    			char_input = 'Y';
    			break;
    		
    		case 'N':
    		case 'n':
    			char_input = 'N';
    			break;

          
            default:   //  no legal option was entered		
                cout << endl
                     << " Not a valid choice. " << endl
    			     << " Choose again." << endl << endl;
		} 
    } while(char_input != 'Y' && char_input != 'N' );  // loop until correct input entered
	return char_input;
} // end function

void program_end() //echo input and end program
{
    cout << endl << endl
     << "\t\tYou entered : "
     << REPEAT
     << "\t\tGood bye"
     << endl << endl
     << "\t\t\t\t\t= END OF PROGRAM =\n"
     << endl;
}
/* //  mutlistatement if-else for boolean comparison

    if (player1 == 'P' && player2 == 'P')
    {
        cout <<  "Paper selected by both Players. Nobody wins." << endl;
    }
    
    else if (player1 == 'P' && player2 == 'R')
    {	
        cout << "Paper covers Rock. Player1 wins" << endl; 
    }
    
    else
    {    
        cout << "there is a problem with the entered inputs for the players";
    }

*/

